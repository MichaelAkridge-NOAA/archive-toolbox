name: 07 - Build All Executables

on:
  workflow_dispatch:

jobs:
  build:
    name: Generate Build Artifacts
    strategy:
      matrix:
        os: [windows-latest]
        file:
          - toolbox/folder-stats-tool/folderstats.py
          - toolbox/garmin-gps-file-converter/gpxconverter.py

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set file name without extension
      id: set-filename
      run: |
        fileName=$(basename ${{ matrix.file }} .py)
        echo "FILE_NAME=$fileName" >> $GITHUB_ENV
        echo "Set FILE_NAME to $fileName"

    - name: Debug - Check FILE_NAME environment variable
      run: echo "FILE_NAME is ${{ env.FILE_NAME }}"

    - name: Set up Python on Windows and macOS
      if: matrix.os != 'ubuntu-latest'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies and pyinstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        file_dir=$(dirname "${{ matrix.file }}")
        python -m pip install --upgrade pip
        pip install -r "$file_dir/requirements.txt"
        pip install pyinstaller

    - name: Install dependencies and pyinstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        file_dir=$(dirname ${{ matrix.file }})
        python -m pip install --upgrade pip
        pip install -r $file_dir/requirements.txt
        pip install pyinstaller

    - name: Set up Miniconda (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.11'
        auto-activate-base: true

    - name: Create and activate conda environment and install pyinstaller (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        conda create -n myenv python=3.11 -y
        conda run -n myenv conda install -c conda-forge pyinstaller -y
        conda run -n myenv pip install -r "$(dirname ${{ matrix.file }})/requirements.txt"

    - name: Build executable
      run: pyinstaller --onefile "${{ matrix.file }}"

    - name: Rename and zip artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        base_name=$(basename ${{ matrix.file }} .py)
        mv "dist/$base_name.exe" "dist/$base_name-windows.exe"
        Compress-Archive -Path "dist/$base_name-windows.exe" -DestinationPath "dist/$base_name-windows.zip"

    - name: Rename and zip artifact (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        base_name=$(basename ${{ matrix.file }} .py)
        mv dist/$base_name dist/$base_name-macos
        zip -j dist/$base_name-macos.zip dist/$base_name-macos

    - name: Rename and zip artifact (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        base_name=$(basename ${{ matrix.file }} .py)
        mv dist/$base_name dist/$base_name-linux
        zip -j dist/$base_name-linux.zip dist/$base_name-linux

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.FILE_NAME }}-${{ matrix.os }}
        path: dist/*.zip

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set release name and tag
      id: set-release
      run: |
        DATE_TIME=$(date +%Y%m%d_%H.%M.%S)
        echo "RELEASE_TAG=v1.0.${DATE_TIME}" >> $GITHUB_ENV
        echo "RELEASE_NAME=Release v1.0.${DATE_TIME}" >> $GITHUB_ENV

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: folderstats-windows-latest
        path: ./artifacts/windows
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: folderstats-macos-latest
        path: ./artifacts/macos
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: folderstats-ubuntu-latest
        path: ./artifacts/linux

    - name: List downloaded artifacts
      run: ls -R ./artifacts

    - name: Create and Upload Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: |
          ./artifacts/windows/*.zip
          ./artifacts/macos/*.zip
          ./artifacts/linux/*.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.RELEASE_TAG }}
        name: ${{ env.RELEASE_NAME }}
        body: Release ${{ env.RELEASE_NAME }} TEST - GHA to build Exe files
        draft: true
        prerelease: true

