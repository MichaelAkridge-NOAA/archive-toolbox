name: 03 - Build All Executables

on:
  workflow_dispatch: # Trigger workflow manually from GitHub Actions

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        file: [
          'toolbox/heic-heif-converter/heic-heif-converter.py',
          'toolbox/archive-manifest-file-tool/mnftool_gui.py',
          'toolbox/file-copy-tool/filecopy_tool.py',
          'toolbox/folder-stats-tool/folderstats.py',
          'toolbox/garmin-gps-file-converter/gpxconverter.py'
        ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies and pyinstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $file_dir = Split-Path "${{ matrix.file }}"
          python -m pip install --upgrade pip
          pip install -r "$file_dir\requirements.txt"
          pip install pyinstaller
        shell: pwsh

      - name: Install dependencies and pyinstaller (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          file_dir=$(dirname ${{ matrix.file }})
          python -m pip install --upgrade pip
          pip install -r $file_dir/requirements.txt
          pip install pyinstaller

      - name: Set up Miniconda (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: '3.11'
          auto-activate-base: true

      - name: Create and activate conda environment and install pyinstaller (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          conda create -n myenv python=3.11 -y
          conda run -n myenv conda install -c conda-forge pyinstaller wxpython -y
          conda run -n myenv git clone https://github.com/chriskiehl/Gooey.git
          cd Gooey
          conda run -n myenv python setup.py install
          cd ..
          file_dir=$(dirname ${{ matrix.file }})
          if [ -f "$file_dir/requirements.txt" ]; then
            conda run -n myenv pip install -r $file_dir/requirements.txt
          fi`

      - name: Build executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller -F --strip --exclude-module tkinter ${{ matrix.file }}
        shell: pwsh

      - name: Build executable (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller -F --strip --exclude-module tkinter ${{ matrix.file }}

      - name: Build executable (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          conda run -n myenv pyinstaller -F --strip --exclude-module tkinter ${{ matrix.file }}


      - name: Rename and zip artifact (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          base_name=$(basename ${{ matrix.file }} .py)
          exe_name=dist/$base_name
          mv $exe_name dist/$base_name-macos
          zip -j dist/$base_name-macos.zip dist/$base_name-macos

      - name: Rename and zip artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          base_name=$(basename ${{ matrix.file }} .py)
          exe_name=dist/$base_name
          mv $exe_name dist/$base_name-linux
          zip -j dist/$base_name-linux.zip dist/$base_name-linux

      - name: Rename artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $base_name = [System.IO.Path]::GetFileNameWithoutExtension("${{ matrix.file }}")
          Write-Host "Base name is: $base_name"  # Debug line
          Move-Item "dist/$base_name.exe" "dist/$base_name-windows.exe"
        shell: pwsh

      - name: Zip artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $base_name = [System.IO.Path]::GetFileNameWithoutExtension("${{ matrix.file }}")
          Write-Host "Base name for zip is: $base_name"  # Debug line
          Compress-Archive -Path "dist/$base_name-windows.exe" -DestinationPath "dist/$base_name-windows.zip"
        shell: pwsh

      - name: Set artifact name (macOS and Linux)
        if: matrix.os != 'windows-latest'
        run: echo "ARTIFACT_NAME=${{ matrix.os }}-$(basename ${{ matrix.file }} .py)" >> $GITHUB_ENV

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ base_name }}-windows
          path: dist/*.zip
          if-no-files-found: warn
          compression-level: 6
          overwrite: false

      - name: Upload artifact
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: dist/*.zip
          if-no-files-found: warn
          compression-level: 6
          overwrite: false

  create-release:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set release name and tag
        id: set-release
        run: |
          DATE_TIME=$(date +%Y%m%d_%H.%M.%S)
          echo "RELEASE_TAG=v1.0.${DATE_TIME}" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release v1.0.${DATE_TIME}" >> $GITHUB_ENV

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-executables
          path: ./artifacts/windows

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-executables
          path: ./artifacts/macos

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-executables
          path: ./artifacts/linux

      - name: List downloaded artifacts
        run: ls -R ./artifacts

      - name: Create and Upload Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            ./artifacts/windows/*.zip
            ./artifacts/macos/*.zip
            ./artifacts/linux/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: "Release ${{ env.RELEASE_NAME }} TEST - GHA to build Exe files"
          draft: true
          prerelease: true
